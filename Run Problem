# Given values for P, Q, R, S
P = 3520
Q = 3528
R = 3529
S = 3536

# Calculate weights and values
weights = [0.2 * S, 0.1 * P, 0.01 * Q, 0.05 * R, 0.07 * (P + Q + R + S) / 4, 0.08 * min(P, Q, R, S)]
values = [P, Q, R, S, abs(P - Q), (P + Q + R + S) / 4]

# Knapsack capacity
capacity = S

# Number of items
n = len(weights)

# Initialize the DP table (n+1) x (capacity+1) with all zeros
dp = [[0] * (capacity + 1) for _ in range(n + 1)]

# Dynamic programming to fill the table
for i in range(1, n + 1):
    for w in range(1, capacity + 1):
        if weights[i - 1] <= w:
            dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - int(weights[i - 1])] + values[i - 1])
        else:
            dp[i][w] = dp[i - 1][w]

# The maximum value that can be attained is in dp[n][capacity]
max_value = dp[n][capacity]
max_value
